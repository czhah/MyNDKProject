package com.thedream.cz.myndkproject.mvp.presenter;import android.os.Bundle;import android.support.annotation.Nullable;import com.thedream.cz.myndkproject.mvp.view.BaseMvpView;import com.thedream.cz.myndkproject.utils.PrintUtil;/** * Created by cz on 2017/12/9. * Presenter基类：管理Presenter的声明周期 */public class BaseMvpPresenter<V extends BaseMvpView> {    private V mView;    /**     * Presenter被意外销毁后重新创建时调用     *  可用于恢复销毁前保存的数据 onSaveInstanceState()     *  注意：此方法会在P层构造方法之后执行     * @param saveState     */    public void onCreatePresenter(@Nullable Bundle saveState) {        PrintUtil.printE("P onCreatePresenter = ");    }    /**     * 在Presenter意外销毁的时候被调用，它的调用时机和Activity、Fragment、View中的onSaveInstanceState     *  用于P层中保存用户的一些信息     *  调用者直接覆盖该方法，不需要super();     */    public Bundle onSaveInstanceState() {        PrintUtil.printE("P onSaveInstanceState = ");        return new Bundle();    }    /**     * 绑定View(不需要用户处理)     * @param mvpView     */    public void onAttachMvpView(V mvpView) {        PrintUtil.printE("P onResume = ");        mView = mvpView;    }    /**     * 解除绑定View     * 不需要用户处理     */    public void onDetachMvpView() {        PrintUtil.printE("P onDetachMvpView = ");        mView = null;    }    /**     * Presenter被销毁时调用     * 用于执行一些取消请求、关闭对话框等操作     */    public void onDestroyPresenter() {        PrintUtil.printE("P onDestroy = ");    }    /**     * 获取V层接口View     *     * @return 返回当前的MvpView     */    protected V getMvpView() {        return mView;    }}